import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Scanner;
public class Driver {
    public static void main(String[] args) throws Exception {
        Scanner in = new Scanner(System.in);
        BinarySearchTree t = new BinarySearchTree();
        File file = new File("/Users/yehiaelbalky/Desktop/dictionary.txt");
        BufferedReader br = new BufferedReader(new FileReader(file));
        String st;
        while ((st = br.readLine()) != null) {
            t.insert(st);
        }
        int choice;
        do{
            System.out.print("1. Print tree using in order traversal"
                    + "\n2. Print tree using post order traversal"
                    + "\n3. Print tree using pre order traversal"
                    + "\n4. Print tree size (number of words loaded in the tree)"
                    + "\n5. Print tree using BFS Traversal"
                    + "\n6. Print tree height"
                    + "\n7. Search for a word"
                    + "\n8. Insert new word in the tree"
                    + "\nAns: ");
            choice = in.nextInt();
            switch(choice) {
                case 1: t.printInorder(t.root);
                    break;
                case 2: t.printPostorder(t.root);
                    break;
                case 3: t.printPreorder(t.root);
                    break;
                case 4: System.out.println("Tree size is: " + t.getSize(t.root));
                    break;
                case 5: t.printBfs();
                    break;
                case 6: System.out.println("Tree height is: " + t.getHeight());
                    break;
                case 7: System.out.print("Enter the word you are looking for: ");
                    String word = in.next();
                    TreeNode leaf = t.leafWord(t.root, word);
                    if(word.equals(leaf.data)) {
                        System.out.println("\nThe word is correct");
                    }
                    else {
                        System.out.println("The word is incorrect. You might have meant:"
                        + "\n1. " + leaf.data);
                        TreeNode inorderPredecessor = t.inorderPredecessor(t.root, leaf);
                        if (inorderPredecessor != null)
                            System.out.println("2. " + inorderPredecessor.data);
                        TreeNode inorderSuccessor = t.inorderSuccessor(t.root, leaf);
                        if (inorderSuccessor != null)
                            System.out.println("3. " + inorderSuccessor.data);
                    }
                    break;
                case 8: System.out.print("Enter the word you want to insert: ");
                    String w = in.next();
                    t.insert(w);
                    break;
                default: System.out.println("Try again and choose a valid choice.");
            }
            System.out.println();
        } while(choice != 0);
    }
}
